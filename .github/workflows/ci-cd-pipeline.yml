name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/vcluster-ci-cd-sample
  
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install vCluster CLI
        uses: loft-sh/setup-vcluster@main

      - name: Login to vCluster Platform instance
        env:
          LOFT_URL: ${{ secrets.LOFT_URL }}
          ACCESS_KEY: ${{ secrets.LOFT_ACCESS_KEY }}
        run: vcluster login $LOFT_URL --access-key $ACCESS_KEY

      - name: Create Virtual Cluster for PR
        uses: loft-sh/create-vcluster@main
        with:
          name: pr-${{ github.sha }}
          auto-cleanup: true

      - name: Configure kubectl to use the Virtual Cluster
        run: vcluster connect pr-${{ github.sha }} --namespace vcluster --kube-config kubeconfig.yaml
        env:
          KUBECONFIG: kubeconfig.yaml

      - name: Deploy to Kubernetes
        env:
          KUBECONFIG: kubeconfig.yaml
        run: |
          kubectl apply -Rf ./kubernetes
          kubectl rollout status deployments/my-app

  e2e-tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Application to be Ready
        env:
          KUBECONFIG: kubeconfig.yaml
        run: |
          kubectl wait --for=condition=ready pod -l app=my-app --timeout=120s

      - name: Fetch Application URL
        env:
          KUBECONFIG: kubeconfig.yaml
        id: app-url
        run: |
          export APP_URL=$(kubectl get svc my-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV

      - name: Run E2E Tests
        env:
          BASE_URL: ${{ env.APP_URL }}
        run: npm run e2e
